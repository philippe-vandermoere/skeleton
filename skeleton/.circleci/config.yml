version: '2.1'
workflows:
    version: '2.1'
    tests:
        jobs:
            - phpcs
            - phpstan
            - phpunit
            - security

executors:
    php:
        docker:
            - image: php:7.4-cli-alpine

commands:
    alpine_checkout:
        description: Optimize Alpine checkout.
        steps:
            - run:
                  name: Install alpine requirements
                  command: apk add --update git openssh-client curl make
            - checkout

    php_requirements:
        description: Install php requirements.
        steps:
            - restore_cache:
                  name: Restoring PHP cache extension
                  keys:
                      - pecl-${PHP_VERSION}
            - run:
                  name: Install php extensions
                  command: |
                      mkdir -p pecl-cache
                      php_extension_dir=$(php -i | grep -E '^extension_dir' | awk -F " " '{print $3}')
                      cp -R pecl-cache/. ${php_extension_dir}/

                      apk add --update ${PHPIZE_DEPS} rabbitmq-c-dev rabbitmq-c

                      for extension in amqp redis pdo pdo_mysql; do
                          if [ ! -f ${php_extension_dir}/${extension}.so ]; then
                             case ${extension} in
                                 amqp|redis)
                                     pecl install -o ${extension}
                                 ;;
                                 *)
                                     docker-php-ext-install -j$(nproc) ${extension}
                             esac
                          fi

                          docker-php-ext-enable ${extension}
                      done

                      cp -R ${php_extension_dir}/.  pecl-cache
            - save_cache:
                  name: Saving PHP cache extension
                  key: pecl-${PHP_VERSION}-${CIRCLE_BUILD_NUM}
                  paths:
                      - pecl-cache

    vendor:
        description: Install vendor.
        steps:
            - run:
                  name: Install composer
                  command: |
                      curl -ls https://getcomposer.org/composer-stable.phar -o /usr/local/bin/composer
                      chmod +x /usr/local/bin/composer
            - restore_cache:
                  name: Restoring composer cache
                  keys:
                      - vendor-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}
                      - vendor-
            - run:
                  name: composer
                  command: composer install --no-progress --no-interaction
            - save_cache:
                  name: Saving composer cache
                  key: vendor-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}
                  paths:
                      - vendor

jobs:
    phpcs:
        executor: php
        working_directory: ~/repo
        steps:
            - alpine_checkout
            - php_requirements
            - vendor
            - run:
                  name: phpcs
                  command: make phpcs

    phpstan:
        executor: php
        working_directory: ~/repo
        steps:
            - alpine_checkout
            - php_requirements
            - vendor
            - run:
                  name: phpstan
                  command: make phpstan

    phpunit:
        executor: php
        working_directory: ~/repo
        steps:
            - alpine_checkout
            - php_requirements
            - vendor
            - run:
                  name: phpunit
                  command: make phpunit options="--log-junit ~/phpunit/junit.xml --coverage-html ~/coverage-html"
            - store_artifacts:
                  path: ~/coverage-html
                  destination: coverage-html
            - store_artifacts:
                  path: ~/phpunit
                  destination: phpunit
            - store_test_results:
                  path: ~/phpunit

    security:
        executor: php
        working_directory: ~/repo
        steps:
            - alpine_checkout
            - run:
                  name: Install SensioLabs Security Checker
                  command: |
                      curl -ls https://get.sensiolabs.org/security-checker.phar -o /usr/local/bin/security-checker
                      chmod +x /usr/local/bin/security-checker
            - run:
                  name: Checks dependencies security vulnerabilities
                  command: security-checker security:check composer.lock
